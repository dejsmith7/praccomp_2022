---
title: "Praccomp 2022_R tutorial"
output: html_notebook
---

# R basic

## Introduction

R as a calculator

```{r}
1 * 100
```
## Vectorization
```{r}
rm{v}
```
## Package Management
```{r}
install.packages("vegan", dependencies=TRUE)
```
# Return to this to finish / install R tools...

```{r}
remove.packages("vegan")
```
# Return to this to finish / install R tools...

## Project Management

1. Set up management structure (i.e., "data," "src", "results," "doc")
2. Discuss avoiding redundancy of files
3. Make sure to use version control (i.e., Git)

## Getting help

Paste the citation here (chunk)

## Data and their formats

```{r}
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1,5,3.2), likes_string = c(1,0,1))



```{r}
cats
```


```{r}
getwd()
```


```{r}
write.csv(cats,file = "./data/cats.csv")
```
## Resolve this error above and fill in...

```{r}
paste ("My cat is ", cats$coat, ", and it weighs ", cats$weight, " kg. ", sep="")
```
### Data Types

```{r}
typeof(cats$coat)
```

```{r}
typeof(cats$weight)
```
```{r}
typeof(1i)
```
```{r}
typeof(FALSE)
```
```{r}
typeof(TRUE)
```
```{r}
typeof(T)
typeof(F)
```
```{r}
typeof(cats)
```
```{r}
class(cats)
```
```{r}
file.show("./data/cats.csv")
```
## Come back to this to fix the error above

```{r}
cats$likes_string <- as.logical(cats$likes_string)
typeof(cats$likes_string)
```
```{r}
cats$likes_string
```
```{r}
c("a", "b")
```
```{r}
ab <- c("a", "b")
ab
```
## Come back and fix

```{r}
1:10
```
```{r}
seq(10)
```
```{r}
z <- seq(10)
head(...)
###Return to chunk to finish...
```
```{r}
seq(70,100, by=5)
```
### Data Frames

```{r}
cats
```
```{r}
str(cats$coat)
```
```{r}
coats<-c("tabby", "tortoiseshell", "tortoiseshell", "black", "tabby")
coats
```
```{r}
factor(coats)
```
```{r}
categories <- factor(coats)
class(coats)
class(categories)
```

```{r}
str(categories)
```
### Lists

```{r}
list_example <- list(title= "Numbers", numbers = 1:10, data=TRUE)
```
```{r}
list_example
```
```{r}
another_list <- list(1, "a", TRUE,1+1i)
another_list
```
```{r}
another_list
```

```{r}
typeof(list_example)
class(list_example)
```
```{r}
typeof(cats)
class(cats)
```
```{r}
data.frame(list_example)
```

```{r}
cats
```
```{r}
cats[,3]
```
### Come back to fix this- columns missing...

```{r}
cats[3,]

```
```{r}
cats[2:3,c(1,3)]
```

### Matrices
come back to this and fill in

```{r}
str(matrix_example)
```

```{r}
dim(matrix_example)
```

```{r}
ncol(matrix_example)
```

```{r}
nrow(matrix_example)
```

```{r}
class(data.frame(matrix_example))
```

```{r}
df_example <- data.frame(matrix_example)
df_example
```

### Subsetting

```{r}
p <- c(2.3,6.9,4.0,23,1)
p
```

```{r}
names(p) <- c('a','b','c','d','e')
p
```

```{r}
p[1]
```

```{r}
p[2:4]
```

```{r}

```

```{r}
p[c(1,5)]
```

```{r}
p[6]
```

```{r}
p[-3]
```

```{r}
p[c(-1,-5)]
```

```{r}
p[-(2:4)]
```

```{r}
p[c('a','c')]
```

```{r}
p[c(T,F,T,F,T)]
```

```{r}
p[names(p) !='c']
```

### Factors

```{r}
f <-  factor(c('a', 'b', 'c', 'd', 'e'))
f
```

```{r}
f[f == 'a']
```

```{r}
f[1:3]
```

```{r}
f[f %in% c('b', 'c')]
```

```{r}
f[-3]
```

```{r}
f2 <- factor (c('a', 'a', 'b', 'c', 'c'))
f2
```

```{r}
f2[f2 == 'a']
```

```{r}
f2[f2 %in% c('a', 'c')]
```

### Matrices  Resumed 

```{r}
set.seed(65)
m <- matrix(rnorm(6*4), ncol=4)

```

```{r}
m[3:4, c(3,1)]
```
```{r}
m[,c(3,4)]
```

### List Revisited

```{r}
xlist <- list(a= "BIOL48006220", b=seq(1,10, by = 0.5), data = "Grades")
xlist
```
```{r}
xlist[1:2]
```
```{r}
xlist['a']
```

```{r}
xlist[['a']]
```
```{r}
xlist ['b']
```

```{r}
xlist[['b']]
```

### Data Frames Revisted

```{r}
gp <- read.csv('C:/Users/DNA$TY/Desktop/Grad School/Praccomp/data/compt_plastic_wst.csv')
```

```{r}
head(gp, n=10L)
```

```{r}
head(gp[3], n=10L)
```

```{r}
nrow(gp)
```

```{r}
head(gp["country"])
```
```{r}
gp$X2001
```

```{r}
gp[c(1,3), 2:5]
```

```{r}
gp [ which(gp$X1997 <= 100 & gp$X2016 >= 100),]
```


### Conditionals and Flow


```{r}
n <- 10

if (n <10) {
    print("n is less than 10")
}   else if (n >10) {
    print ("n is greater than 10")
}   else {
    print("n is equal to 10")
}
```
```{r}
for (n in seq(1,20))  { 
  if (n <10) {
    print("n is less than 10")
  }   else if (n >10) {
    print ("n is greater than 10")
  }   else {
    print("n is equal to 10")
  }
}
```
```{r}
g <- 0

while (g <=10) {
  print(paste(g, "is less than or equal to 10"))
  g <- g+1
}
```

## Plotting and Figures

```{r}
install.packages("ggplot2")
```

```{r}
plasticdata <- read.csv('C:/Users/DNA$TY/Desktop/Grad School/Praccomp/data/compt_plastic_wst.csv')

head(plasticdata)
```
```{r}
ggplot(data=platicdata, mapping=aes(x=1997, y=2016)) + geom_point()
```

```{r}
gp <- read.csv("C:/Users/DNA$TY/OneDrive/Documents/BIOL48006220_Fall2022/data/GapminderData/data/gapminder_all.csv")
```

```{r}
ggplot(data=gp, mapping=aes())
```
#Come back to this

```{r}
gapminder <- read.csv("http://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv")
head(gapminder)
```
```{r}
ggplot(data=gapminder, mapping=aes(x=gdpPercap, y=lifeExp)) + geom_point()
```

```{r}
ggplot(data=gapminder, mapping=aes(x=year, y=lifeExp, by=country, color=continent)) + geom_line()
```

```{r}
ggplot(data=gapminder, mapping=aes(x=year, y=lifeExp, by=country)) + geom_line(mapping=aes(color=continent)) + geom_point()
```

```{r}
ggplot(data=gapminder, mapping =aes(x=gdpPercap, y=lifeExp)) + geom_point(alpha=0.5) + scale_x_log10()
```

```{r}
ggplot(data=gapminder, mapping=aes(x=gdpPercap, y=lifeExp)) + geom_point(alpha=0.25, color="purple") + scale_x_log10() + geom_smooth(method= lm, color="gold", size=1.25)
```

```{r}
africas <- gapminder[gapminder$continent == "Africa", ]
head(africas)
```

```{r}
ggplot(data=africas, mapping=aes(x=year, y=lifeExp)) + 
  geom_line() + 
  facet_wrap( ~ country) +
  theme(axis.text.x= element_text(angle = 45)) +
  labs(
    x = "Year",
    y = "Life Expectancy",
    title = "Life Expectancy Over Time in African Countries"
  )
```

```{r}
AfricanLifeExp <- ggplot(data=africas, mapping=aes(x=year, y=lifeExp)) + 
  geom_line() + 
  facet_wrap( ~ country) +
  theme(axis.text.x= element_text(angle = 45)) +
  labs(
    x = "Year",
    y = "Life Expectancy",
    title = "Life Expectancy Over Time in African Countries"
  )
```
```{r}
ggsave(filename= "data/AfricanLifeExp.png", plot= AfricanLifeExp, width = 24, height = 40, dpi = 300, units = "cm" )
```

```{r}
pdf(file = "results/AfricanLifeExp.pdf", width = 24, height = 40)
plot(AfricanLifeExp)
dev.off()
```

```{r}
write.table(gapminder, file = "data/gapminder_web.csv", sep=",")
```
```{r}
write.csv(africas, file="data/gapminder_web_africas.csv")
```
```{r}
install.packages(c("ggridges, "))
 
```

